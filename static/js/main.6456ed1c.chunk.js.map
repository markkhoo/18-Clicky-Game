{"version":3,"sources":["components/Wrapper/index.js","components/Card/index.js","App.js","reportWebVitals.js","index.js"],"names":["Wrapper","props","className","children","Card","state","onClick","clicky","id","alt","src","this","image","Component","App","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","chosen1","chosen","score","topScore","includes","push","setState","images","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"o6BAOeA,MAJf,SAAiBC,GACf,OAAO,qBAAKC,UAAU,UAAf,SAA0BD,EAAME,YCc1BC,G,wDAdX,WAAYH,GAAQ,IAAD,8BACf,cAAMA,IACDI,MAAQ,GAFE,E,0CAKnB,WAAW,IAAD,OACN,OACI,qBAAKH,UAAU,OAAOI,QAAS,kBAAM,EAAKL,MAAMM,OAAO,EAAKN,MAAMO,KAAlE,SACI,qBAAKC,IAAI,sCAAsCC,IAAKC,KAAKV,MAAMW,c,GAT5DC,c,OCwEJC,E,kDArEb,WAAYb,GAAQ,IAAD,8BACjB,cAAMA,IASRc,QAAU,SAACC,GAGT,IAFA,IAAiCC,EAAgBC,EAA7CC,EAAeH,EAAMI,OAElB,IAAMD,GAEXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAGzCF,EAAiBD,EAFjBG,GAAgB,GAGhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAEvB,OAAOD,GAtBU,EAyBnBT,OAAS,SAACC,GACR,IAAIgB,EAAU,EAAKnB,MAAMoB,OACrBC,EAAQ,EAAKrB,MAAMqB,MACnBC,EAAW,EAAKtB,MAAMsB,SACtBH,EAAQI,SAASpB,IACnBkB,EAAQ,EACRF,EAAU,KAEVE,IACAF,EAAQK,KAAKrB,GACVmB,EAAWD,IACZC,EAAWD,IAGf,EAAKI,SAAS,CACZC,OAAQ,EAAKhB,QAAQ,EAAKV,MAAM0B,QAChCN,OAAQD,EACRE,MAAOA,EACPC,SAAUA,KAzCZ,EAAKtB,MAAQ,CACX0B,OAAQ,EAAKhB,QAAQgB,GACrBN,OAAQ,GACRC,MAAO,EACPC,SAAU,GANK,E,0CA+CnB,WAAU,IAAD,OACP,OACE,eAAC,EAAD,WACE,mCACE,6CACA,yCAAYhB,KAAKN,MAAMqB,MAAvB,mBAA8Cf,KAAKN,MAAMsB,eAE3D,8BACGhB,KAAKN,MAAM0B,OAAOC,KAAI,SAAAD,GAAM,OAC3B,cAAC,EAAD,CACEvB,GAAIuB,EAAOvB,GAEXI,MAAOmB,EAAOnB,MACdL,OAAQ,EAAKA,QAFRwB,EAAOvB,gB,GA3DRK,aCOHoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6456ed1c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React, { Component } from \"react\";\r\nimport \"./style.css\";\r\n\r\nclass Card extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {}\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"card\" onClick={() => this.props.clicky(this.props.id)}>\r\n                <img alt=\"Random Interior Design, no cheating\" src={this.props.image} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Card;","import React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper\";\nimport Card from \"./components/Card\";\nimport images from \"./images.json\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      images: this.shuffle(images),\n      chosen: [],\n      score: 0,\n      topScore: 0\n    };\n  }\n\n  shuffle = (array) => {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    };\n    return array;\n  };\n\n  clicky = (id) => {\n    let chosen1 = this.state.chosen;\n    let score = this.state.score;\n    let topScore = this.state.topScore;\n    if (chosen1.includes(id)) {\n      score = 0;\n      chosen1 = [];\n    } else {\n      score++;\n      chosen1.push(id);\n      if(topScore < score) {\n        topScore = score;\n      };\n    };\n    this.setState({\n      images: this.shuffle(this.state.images),\n      chosen: chosen1,\n      score: score,\n      topScore: topScore\n    });\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <header>\n          <h1>Clicky Game</h1>\n          <h2>Score: {this.state.score} ||| Top Score: {this.state.topScore}</h2>\n        </header>\n        <div>\n          {this.state.images.map(images => (\n            <Card \n              id={images.id}\n              key={images.id}\n              image={images.image}\n              clicky={this.clicky}\n            />\n          ))}\n        </div>\n      </Wrapper>\n    );\n  };\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}